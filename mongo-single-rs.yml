---
- name: Install MongoDB and configure a single-host 3-instance replica set
  hosts: mongo_single
  become: true
  vars:
    # You can switch to "8.0" if you want native Ubuntu 24.04 (noble) support.
    mongo_version: "7.0"
    replset_name: "rs0"

    instances:
      - { id: 1, port: 27017, dbpath: "/var/lib/mongo/rs1", logdir: "/var/log/mongodb/rs1" }
      - { id: 2, port: 27018, dbpath: "/var/lib/mongo/rs2", logdir: "/var/log/mongodb/rs2" }
      - { id: 3, port: 27019, dbpath: "/var/lib/mongo/rs3", logdir: "/var/log/mongodb/rs3" }

    bind_ip: "127.0.0.1"
    keyfile_path: "/etc/mongo-keyfile"
    admin_user: "alpha"
    admin_password: "alpha"

    expose_remotely: false
    server_ip: "192.168.50.111"

  tasks:
    # -------------------------
    # OS PRE-FLIGHT (no SELinux)
    # -------------------------
    - name: Ensure time sync (chrony)
      package: { name: chrony, state: present }

    - name: Enable & start chronyd
      service: { name: chronyd, state: started, enabled: true }

    - name: Disable Transparent Huge Pages now
      shell: |
        if test -f /sys/kernel/mm/transparent_hugepage/enabled; then echo never > /sys/kernel/mm/transparent_hugepage/enabled || true; fi
        if test -f /sys/kernel/mm/transparent_hugepage/defrag; then echo never > /sys/kernel/mm/transparent_hugepage/defrag || true; fi
      args: { executable: /bin/bash }

    - name: Persist THP disable (systemd unit)
      copy:
        dest: /etc/systemd/system/disable-thp.service
        mode: "0644"
        content: |
          [Unit]
          Description=Disable Transparent Huge Pages (THP)
          After=network.target
          [Service]
          Type=oneshot
          ExecStart=/bin/bash -c 'if test -f /sys/kernel/mm/transparent_hugepage/enabled; then echo never > /sys/kernel/mm/transparent_hugepage/enabled; fi'
          ExecStart=/bin/bash -c 'if test -f /sys/kernel/mm/transparent_hugepage/defrag; then echo never > /sys/kernel/mm/transparent_hugepage/defrag; fi'
          RemainAfterExit=yes
          [Install]
          WantedBy=multi-user.target

    - name: Enable THP unit
      systemd: { name: disable-thp, state: started, enabled: true, daemon_reload: true }

    - name: Persist MongoDB-recommended sysctl
      copy:
        dest: /etc/sysctl.d/99-mongodb.conf
        mode: "0644"
        content: |
          fs.file-max = 131072
          vm.swappiness = 1
          net.core.somaxconn = 4096
          net.ipv4.tcp_keepalive_time = 120

    - name: Reload sysctl
      command: sysctl --system

    # ============================================================
    # INSTALL MONGODB — Debian/Ubuntu (clean stale sources first)
    # ============================================================
    - block:
        - name: Find any stale MongoDB APT source files
          find:
            paths: /etc/apt/sources.list.d
            patterns: "mongodb*.list"
          register: mongodb_sources

        - name: Remove stale MongoDB APT sources
          file:
            path: "{{ item.path }}"
            state: absent
          loop: "{{ mongodb_sources.files }}"
          when: mongodb_sources.matched | default(0) | int > 0

        - name: Ensure apt prerequisites
          apt:
            name:
              - ca-certificates
              - curl
              - gnupg
              - lsb-release
              - apt-transport-https
            state: present
            update_cache: yes

        - name: Determine codename and arch for APT repo
          set_fact:
            apt_codename: "{{ ansible_facts['lsb']['codename'] | default(ansible_facts['distribution_release']) }}"
            apt_arch: "{{ 'amd64' if ansible_facts['architecture'] in ['x86_64','amd64'] else 'arm64' if ansible_facts['architecture'] in ['aarch64','arm64'] else 'amd64' }}"
            apt_base: "{{ 'ubuntu' if ansible_facts['distribution'] == 'Ubuntu' else 'debian' }}"
            apt_component: "{{ 'multiverse' if ansible_facts['distribution'] == 'Ubuntu' else 'main' }}"

        # Fallback: Ubuntu 24.04 noble has no 7.0 repo -> use jammy
        - name: Choose supported repo codename (fallback noble→jammy for 7.0)
          set_fact:
            apt_repo_codename: >-
              {% if apt_base == 'ubuntu' and apt_codename == 'noble' and mongo_version == '7.0' %}
              jammy
              {% else %}
              {{ apt_codename }}
              {% endif %}

        - name: Warn if codename fallback is being used
          debug:
            msg: "MongoDB {{ mongo_version }} not available for {{ apt_codename }}, using {{ apt_repo_codename }} repo instead."
          when: apt_repo_codename != apt_codename

        - name: Ensure /etc/apt/keyrings exists
          file: { path: /etc/apt/keyrings, state: directory, mode: "0755" }

        - name: Install MongoDB GPG key (to /etc/apt/keyrings)
          shell: >
            curl -fsSL https://pgp.mongodb.com/server-{{ mongo_version }}.asc |
            gpg --dearmor -o /etc/apt/keyrings/mongodb-server-{{ mongo_version }}.gpg
          args: { creates: "/etc/apt/keyrings/mongodb-server-{{ mongo_version }}.gpg" }

        - name: Compose exact apt repo line
          set_fact:
            mongo_apt_repo_line: >-
              deb [arch={{ apt_arch }} signed-by=/etc/apt/keyrings/mongodb-server-{{ mongo_version }}.gpg]
              https://repo.mongodb.org/apt/{{ apt_base }} {{ apt_repo_codename }}/mongodb-org/{{ mongo_version }} {{ apt_component }}

        - name: Write MongoDB apt source file
          copy:
            dest: "/etc/apt/sources.list.d/mongodb-org-{{ mongo_version }}.list"
            content: "{{ mongo_apt_repo_line }}\n"
            mode: "0644"

        - name: Update apt cache
          apt: { update_cache: yes }

        - name: Install MongoDB (APT)
          apt:
            name: mongodb-org
            state: present
            update_cache: yes
      when: ansible_facts['os_family'] == 'Debian'

    # -------------------------
    # DIRECTORIES & KEYFILE
    # -------------------------
    - name: Ensure data directories exist
      file: { path: "{{ item.dbpath }}", state: directory, owner: mongod, group: mongod, mode: "0755" }
      loop: "{{ instances }}"

    - name: Ensure log directories exist
      file: { path: "{{ item.logdir }}", state: directory, owner: mongod, group: mongod, mode: "0755" }
      loop: "{{ instances }}"

    - name: Generate keyfile (once)
      shell: "openssl rand -base64 756 > {{ keyfile_path }}"
      args: { creates: "{{ keyfile_path }}" }

    - name: Fix keyfile permissions
      file: { path: "{{ keyfile_path }}", owner: mongod, group: mongod, mode: "0600" }

    # -------------------------
    # SYSTEMD MULTI-INSTANCE UNIT (templated or inline ok)
    # -------------------------
    - name: Install systemd template unit mongod@.service
      copy:
        dest: /etc/systemd/system/mongod@.service
        mode: "0644"
        content: |
          [Unit]
          Description=MongoDB Database Server (instance %i)
          After=network.target
          [Service]
          User=mongod
          Group=mongod
          Environment="OPTS=--config /etc/mongod-%i.conf"
          ExecStart=/usr/bin/mongod $OPTS
          PIDFile=/run/mongodb/mongod-%i.pid
          RuntimeDirectory=mongodb
          RuntimeDirectoryMode=0755
          LimitNOFILE=131072
          LimitNPROC=65535
          TasksMax=infinity
          TimeoutStartSec=0
          [Install]
          WantedBy=multi-user.target

    - name: Reload systemd
      systemd: { daemon_reload: true }

    - name: Disable default single-instance service if present
      service: { name: mongod, state: stopped, enabled: false }
      failed_when: false

    # -------------------------
    # PHASE 1 — INIT WITHOUT AUTH
    # -------------------------
    - name: Render mongod configs (auth DISABLED for init)
      template:
        src: "templates/mongod.conf.j2"
        dest: "/etc/mongod-{{ item.port }}.conf"
        mode: "0644"
      vars:
        port: "{{ item.port }}"
        dbpath: "{{ item.dbpath }}"
        logdir: "{{ item.logdir }}"
        bind_ip: "{{ bind_ip if not expose_remotely else '127.0.0.1,' + server_ip }}"
        replset_name: "{{ replset_name }}"
        keyfile_path: "{{ keyfile_path }}"
        enable_auth: false
      loop: "{{ instances }}"
      notify: restart_instances

    - name: Enable & start all three instances
      systemd: { name: "mongod@{{ item.port }}", state: started, enabled: true }
      loop: "{{ instances }}"

    - name: Wait for ports
      wait_for:
        host: "{{ (bind_ip if not expose_remotely else '127.0.0.1') }}"
        port: "{{ item.port }}"
        timeout: 60
      loop: "{{ instances }}"

    - name: Write rs initiation script
      copy:
        dest: /tmp/rs_init.js
        mode: "0644"
        content: |
          const cfg = {
            _id: "{{ replset_name }}",
            members: [
          {% for inst in instances %}
              { _id: {{ loop.index0 }}, host: "127.0.0.1:{{ inst.port }}" }{{ "," if not loop.last else "" }}
          {% endfor %}
            ]
          };
          try { rs.initiate(cfg); } catch(e) { print(e); }
          printjson(rs.status());

    - name: Initiate replica set (idempotent)
      shell: "mongosh --quiet 127.0.0.1:27017 /tmp/rs_init.js"
      register: rsinit
      changed_when: "'already initialized' not in rsinit.stdout and 'configuration' not in rsinit.stdout"

    - name: Wait for PRIMARY election
      shell: "mongosh --quiet 127.0.0.1:27017 --eval 'db.hello().isWritablePrimary'"
      register: hello
      retries: 20
      delay: 3
      until: hello.stdout.find('true') != -1

    - name: Create admin user (localhost exception)
      copy:
        dest: /tmp/create_admin.js
        mode: "0644"
        content: |
          const adm = db.getSiblingDB("admin");
          if (!adm.getUser("{{ admin_user }}")) {
            adm.createUser({
              user: "{{ admin_user }}",
              pwd: "{{ admin_password }}",
              roles: [ { role: "root", db: "admin" } ]
            });
            print("Admin user created.");
          } else { print("Admin user already exists."); }

    - name: Run admin user creation
      shell: "mongosh --quiet 127.0.0.1:27017 /tmp/create_admin.js"

    # -------------------------
    # PHASE 2 — ENABLE AUTH & VERIFY
    # -------------------------
    - name: Re-render configs with authorization ENABLED
      template:
        src: "templates/mongod.conf.j2"
        dest: "/etc/mongod-{{ item.port }}.conf"
        mode: "0644"
      vars:
        port: "{{ item.port }}"
        dbpath: "{{ item.dbpath }}"
        logdir: "{{ item.logdir }}"
        bind_ip: "{{ bind_ip if not expose_remotely else '127.0.0.1,' + server_ip }}"
        replset_name: "{{ replset_name }}"
        keyfile_path: "{{ keyfile_path }}"
        enable_auth: true
      loop: "{{ instances }}"
      notify: restart_instances

    - name: Verify PRIMARY with auth
      shell: >
        mongosh --quiet --host 127.0.0.1 --port 27017
        -u "{{ admin_user }}" -p "{{ admin_password }}" --authenticationDatabase admin
        --eval "db.hello().isWritablePrimary"
      register: isprimary
      retries: 10
      delay: 3
      until: isprimary.stdout.find("true") != -1

    - name: Show rs.status() (debug)
      shell: >
        mongosh --quiet --host 127.0.0.1 --port 27017
        -u "{{ admin_user }}" -p "{{ admin_password }}" --authenticationDatabase admin
        --eval "rs.status().set"
      register: rsstatus
      changed_when: false

    - name: Print rs.status() set name
      debug: { var: rsstatus.stdout }

  handlers:
    - name: restart_instances
      systemd:
        name: "mongod@{{ item.port }}"
        state: restarted
      loop: "{{ instances }}"
