---
- name: Install MongoDB and configure a single-host 3-instance replica set
  hosts: mongo_single
  become: true
  vars:
    # MongoDB upstream (set to "8.0" if you need it)
    mongo_version: "7.0"
    # RHEL base used for upstream repo; 9 works fine with Fedora dnf
    mongo_rhel_releasever: "9"

    replset_name: "rs0"

    # Three instances on the SAME server (unique ports & dirs)
    instances:
      - { id: 1, port: 27017, dbpath: "/var/lib/mongo/rs1", logdir: "/var/log/mongodb/rs1" }
      - { id: 2, port: 27018, dbpath: "/var/lib/mongo/rs2", logdir: "/var/log/mongodb/rs2" }
      - { id: 3, port: 27019, dbpath: "/var/lib/mongo/rs3", logdir: "/var/log/mongodb/rs3" }

    # Keep internal & safe (all three live on one box)
    bind_ip: "127.0.0.1"

    # Internal member auth keyfile + first admin (via localhost exception)
    keyfile_path: "/etc/mongo-keyfile"
    admin_user: "alpha"
    admin_password: "alpha"

    # Optional: set to true ONLY if you will connect from outside this host
    expose_remotely: false
    server_ip: "192.168.50.111"

  tasks:
    # -------------------------
    # OS PRE-FLIGHT (best-practice)
    # -------------------------
    - name: Ensure time sync (chrony)
      package:
        name: chrony
        state: present

    - name: Enable & start chronyd
      service:
        name: chronyd
        state: started
        enabled: true

    - name: Disable Transparent Huge Pages now
      shell: |
        if test -f /sys/kernel/mm/transparent_hugepage/enabled; then echo never > /sys/kernel/mm/transparent_hugepage/enabled || true; fi
        if test -f /sys/kernel/mm/transparent_hugepage/defrag; then echo never > /sys/kernel/mm/transparent_hugepage/defrag || true; fi
      args:
        executable: /bin/bash

    - name: Persist THP disable (systemd unit)
      copy:
        dest: /etc/systemd/system/disable-thp.service
        mode: "0644"
        content: |
          [Unit]
          Description=Disable Transparent Huge Pages (THP)
          After=network.target
          [Service]
          Type=oneshot
          ExecStart=/bin/bash -c 'if test -f /sys/kernel/mm/transparent_hugepage/enabled; then echo never > /sys/kernel/mm/transparent_hugepage/enabled; fi'
          ExecStart=/bin/bash -c 'if test -f /sys/kernel/mm/transparent_hugepage/defrag; then echo never > /sys/kernel/mm/transparent_hugepage/defrag; fi'
          RemainAfterExit=yes
          [Install]
          WantedBy=multi-user.target

    - name: Enable THP unit
      systemd:
        name: disable-thp
        state: started
        enabled: true
        daemon_reload: true

    - name: Persist MongoDB-recommended sysctl
      copy:
        dest: /etc/sysctl.d/99-mongodb.conf
        mode: "0644"
        content: |
          fs.file-max = 131072
          vm.swappiness = 1
          net.core.somaxconn = 4096
          net.ipv4.tcp_keepalive_time = 120

    - name: Reload sysctl
      command: sysctl --system

    # -------------------------
    # INSTALL MONGODB (official repo) — robust repo dir handling
    # -------------------------
    - name: Check if /etc/yum.repos.d exists
      ansible.builtin.stat:
        path: /etc/yum.repos.d
      register: yumdir

    - name: Check if /etc/dnf.repos.d exists
      ansible.builtin.stat:
        path: /etc/dnf.repos.d
      register: dnfdir

    - name: Decide repos_dir (prefer yum.repos.d; else dnf.repos.d; else fallback to yum.repos.d)
      ansible.builtin.set_fact:
        repos_dir: >-
          {{ '/etc/yum.repos.d' if yumdir.stat.exists else
             '/etc/dnf.repos.d' if dnfdir.stat.exists else
             '/etc/yum.repos.d' }}

    - name: Ensure repos_dir exists (create if missing)
      ansible.builtin.file:
        path: "{{ repos_dir }}"
        state: directory
        mode: "0755"

    - name: Add MongoDB upstream repo (idempotent)
      ansible.builtin.yum_repository:
        name: "mongodb-org-{{ mongo_version }}"
        description: "MongoDB Repository"
        baseurl: "https://repo.mongodb.org/yum/redhat/{{ mongo_rhel_releasever }}/mongodb-org/{{ mongo_version }}/x86_64/"
        enabled: yes
        gpgcheck: yes
        gpgkey: "https://www.mongodb.org/static/pgp/server-{{ mongo_version }}.asc"
        file: "mongodb-org-{{ mongo_version }}"
        reposdir: "{{ repos_dir }}"

    - name: Install MongoDB server & tools
      ansible.builtin.dnf:
        name: mongodb-org
        state: present
        update_cache: true

    # -------------------------
    # DIRECTORIES & KEYFILE
    # -------------------------
    - name: Ensure data directories exist
      ansible.builtin.file:
        path: "{{ item.dbpath }}"
        state: directory
        owner: mongod
        group: mongod
        mode: "0755"
      loop: "{{ instances }}"

    - name: Ensure log directories exist
      ansible.builtin.file:
        path: "{{ item.logdir }}"
        state: directory
        owner: mongod
        group: mongod
        mode: "0755"
      loop: "{{ instances }}"

    - name: Generate keyfile (once)
      ansible.builtin.shell: "openssl rand -base64 756 > {{ keyfile_path }}"
      args:
        creates: "{{ keyfile_path }}"

    - name: Fix keyfile permissions
      ansible.builtin.file:
        path: "{{ keyfile_path }}"
        owner: mongod
        group: mongod
        mode: "0600"

    # -------------------------
    # SYSTEMD MULTI-INSTANCE UNIT
    # -------------------------
    - name: Install systemd template unit mongod@.service
      ansible.builtin.copy:
        dest: /etc/systemd/system/mongod@.service
        mode: "0644"
        content: |
          [Unit]
          Description=MongoDB Database Server (instance %i)
          After=network.target

          [Service]
          User=mongod
          Group=mongod
          Environment="OPTS=--config /etc/mongod-%i.conf"
          ExecStart=/usr/bin/mongod $OPTS
          PIDFile=/run/mongodb/mongod-%i.pid
          RuntimeDirectory=mongodb
          RuntimeDirectoryMode=0755
          LimitNOFILE=131072
          LimitNPROC=65535
          TasksMax=infinity
          TimeoutStartSec=0

          [Install]
          WantedBy=multi-user.target

    - name: Reload systemd
      ansible.builtin.systemd:
        daemon_reload: true

    - name: Disable default single-instance service if present
      ansible.builtin.service:
        name: mongod
        state: stopped
        enabled: false
      failed_when: false

    # -------------------------
    # PHASE 1 — INIT WITHOUT AUTH (localhost exception to create admin)
    # -------------------------
    - name: Render mongod configs (auth DISABLED for init)
      ansible.builtin.template:
        src: "templates/mongod.conf.j2"
        dest: "/etc/mongod-{{ item.port }}.conf"
        mode: "0644"
      vars:
        port: "{{ item.port }}"
        dbpath: "{{ item.dbpath }}"
        logdir: "{{ item.logdir }}"
        bind_ip: "{{ bind_ip if not expose_remotely else '127.0.0.1,' + server_ip }}"
        replset_name: "{{ replset_name }}"
        keyfile_path: "{{ keyfile_path }}"
        enable_auth: false
      loop: "{{ instances }}"
      notify: restart_instances

    - name: Enable & start all three instances
      ansible.builtin.systemd:
        name: "mongod@{{ item.port }}"
        state: started
        enabled: true
      loop: "{{ instances }}"

    - name: Wait for ports
      ansible.builtin.wait_for:
        host: "{{ (bind_ip if not expose_remotely else '127.0.0.1') }}"
        port: "{{ item.port }}"
        timeout: 60
      loop: "{{ instances }}"

    - name: Write rs initiation script
      ansible.builtin.copy:
        dest: /tmp/rs_init.js
        mode: "0644"
        content: |
          const cfg = {
            _id: "{{ replset_name }}",
            members: [
          {% for inst in instances %}
              { _id: {{ loop.index0 }}, host: "127.0.0.1:{{ inst.port }}" }{{ "," if not loop.last else "" }}
          {% endfor %}
            ]
          };
          try { rs.initiate(cfg); } catch(e) { print(e); }
          printjson(rs.status());

    - name: Initiate replica set (idempotent)
      ansible.builtin.shell: "mongosh --quiet 127.0.0.1:27017 /tmp/rs_init.js"
      register: rsinit
      changed_when: "'already initialized' not in rsinit.stdout and 'configuration' not in rsinit.stdout"

    - name: Wait for PRIMARY election
      ansible.builtin.shell: "mongosh --quiet 127.0.0.1:27017 --eval 'db.hello().isWritablePrimary'"
      register: hello
      retries: 20
      delay: 3
      until: hello.stdout.find('true') != -1

    - name: Create admin user (localhost exception)
      ansible.builtin.copy:
        dest: /tmp/create_admin.js
        mode: "0644"
        content: |
          const adm = db.getSiblingDB("admin");
          if (!adm.getUser("{{ admin_user }}")) {
            adm.createUser({
              user: "{{ admin_user }}",
              pwd: "{{ admin_password }}",
              roles: [ { role: "root", db: "admin" } ]
            });
            print("Admin user created.");
          } else { print("Admin user already exists."); }

    - name: Run admin user creation
      ansible.builtin.shell: "mongosh --quiet 127.0.0.1:27017 /tmp/create_admin.js"

    # -------------------------
    # PHASE 2 — ENABLE AUTH + (optional) FIREWALL, THEN VERIFY WITH AUTH
    # -------------------------
    - name: Re-render configs with authorization ENABLED
      ansible.builtin.template:
        src: "templates/mongod.conf.j2"
        dest: "/etc/mongod-{{ item.port }}.conf"
        mode: "0644"
      vars:
        port: "{{ item.port }}"
        dbpath: "{{ item.dbpath }}"
        logdir: "{{ item.logdir }}"
        bind_ip: "{{ bind_ip if not expose_remotely else '127.0.0.1,' + server_ip }}"
        replset_name: "{{ replset_name }}"
        keyfile_path: "{{ keyfile_path }}"
        enable_auth: true
      loop: "{{ instances }}"
      notify: restart_instances

    - name: Optionally open firewall ports (only if expose_remotely=true)
      ansible.posix.firewalld:
        port: "{{ item }}/tcp"
        permanent: true
        state: enabled
        immediate: true
      loop: "{{ instances | map(attribute='port') | list }}"
      when: expose_remotely
      failed_when: false

    - name: Verify PRIMARY with auth
      ansible.builtin.shell: >
        mongosh --quiet --host 127.0.0.1 --port 27017
        -u "{{ admin_user }}" -p "{{ admin_password }}" --authenticationDatabase admin
        --eval "db.hello().isWritablePrimary"
      register: isprimary
      retries: 10
      delay: 3
      until: isprimary.stdout.find("true") != -1

    - name: Show rs.status() (debug)
      ansible.builtin.shell: >
        mongosh --quiet --host 127.0.0.1 --port 27017
        -u "{{ admin_user }}" -p "{{ admin_password }}" --authenticationDatabase admin
        --eval "rs.status().set"
      register: rsstatus
      changed_when: false

    - name: Print rs.status() set name
      ansible.builtin.debug:
        var: rsstatus.stdout

  handlers:
    - name: restart_instances
      ansible.builtin.systemd:
        name: "mongod@{{ item.port }}"
        state: restarted
      loop: "{{ instances }}"
